// Code generated by goa v3.0.9, DO NOT EDIT.
//
// world gRPC server
//
// Command:
// $ goa gen github.com/mdetweil/demo-reverse-proxy/server/design

package server

import (
	"context"

	worldpb "github.com/mdetweil/demo-reverse-proxy/server/gen/grpc/world/pb"
	world "github.com/mdetweil/demo-reverse-proxy/server/gen/world"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the worldpb.WorldServer interface.
type Server struct {
	HelloH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the world service endpoints.
func New(e *world.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		HelloH: NewHelloHandler(e.Hello, uh),
	}
}

// NewHelloHandler creates a gRPC handler which serves the "world" service
// "hello" endpoint.
func NewHelloHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeHelloResponse)
	}
	return h
}

// Hello implements the "Hello" method in worldpb.WorldServer interface.
func (s *Server) Hello(ctx context.Context, message *worldpb.HelloRequest) (*worldpb.HelloResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "hello")
	ctx = context.WithValue(ctx, goa.ServiceKey, "world")
	resp, err := s.HelloH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*worldpb.HelloResponse), nil
}
